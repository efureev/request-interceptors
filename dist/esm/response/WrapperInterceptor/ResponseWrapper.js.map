{"version":3,"file":"ResponseWrapper.js","names":["forEach","isArray","isBlob","isEmpty","isObject","isString","merge","select","defaultConfig","dataKey","root","ResponseWrapper","dataType","datas","data","extra","constructor","response","config","setData","isContent","setExtraData","setMessageData","dataKeyName","dk","undefined","value","key","message","isBinary","get","parameter","getDataType"],"sources":["../../../../src/response/WrapperInterceptor/ResponseWrapper.ts"],"sourcesContent":["import { forEach, isArray, isBlob, isEmpty, isObject, isString, merge, select } from '@feugene/mu'\nimport type { AxiosResponse } from 'axios'\n\nconst defaultConfig: ResponseWrapperConfig = {\n  dataKey: 'data',\n  root: false,\n}\n\n\ninterface ResponseWrapperConfig {\n  dataKey: string\n  root: boolean,\n}\n\ninterface ResponseWrapperData {\n  data: any,\n  extra: Record<string, any>,\n}\n\ntype DataType = 'mixed' | 'content' | 'entity' | 'collection' | 'blob'\n/**\n * Create instance, which represent response object\n */\nexport default class ResponseWrapper {\n  private dataType: DataType = 'mixed'\n  private readonly config: ResponseWrapperConfig\n  private readonly datas: ResponseWrapperData = {\n    data: null,\n    extra: {},\n  }\n\n  public readonly response: AxiosResponse\n  private message?: string\n\n  constructor(response: AxiosResponse, config?: Partial<ResponseWrapperConfig>) {\n    this.config = merge<ResponseWrapperConfig>({}, defaultConfig, config || {})\n    this.response = response\n\n    this.setData()\n\n    if (!this.isContent()) {\n      this.setExtraData()\n      this.setMessageData()\n    }\n  }\n\n  private dataKeyName(): string {\n    if (this.config.root) {\n      return ''\n    }\n    return !isEmpty(this.config.dataKey) ? this.config.dataKey : ''\n  }\n\n  private setData(): void {\n    if (isString(this.response.data)) {\n      this.datas.data = this.response.data\n      this.dataType = 'content'\n      return\n    }\n\n    const dk = this.dataKeyName()\n    const data = !isEmpty(dk) && this.response.data[dk] !== undefined ? this.response.data[dk] : this.response.data\n\n    if (isObject(data)) {\n      this.datas.data = { ...data }\n      this.dataType = 'entity'\n    }\n    else if (isArray(data)) {\n      this.datas.data = [...data]\n      this.dataType = 'collection'\n    }\n    else if (isBlob(data)) {\n      this.datas.data = data\n      this.dataType = 'blob'\n    }\n    else {\n      this.datas.data = data\n      this.dataType = isEmpty(dk) ? 'content' : 'mixed'\n    }\n  }\n\n  private setExtraData(): void {\n    const dk = this.dataKeyName()\n    if (dk) {\n      forEach(this.response.data, (value, key) => {\n        if (key !== dk && key !== 'message') {\n          this.datas.extra[<string>key] = value\n        }\n      })\n    }\n  }\n\n  private setMessageData(message = null): void {\n    if (!this.isBinary()) {\n      this.message = !message ? this.response.data.message : message\n    }\n  }\n\n  /**\n   * @example resp.get('data')\n   * @example resp.get('data.title')\n   * @example resp.get('extra')\n   * @example resp.get('extra.meta')\n   */\n  public get(key: string): any {\n    return select(this.datas, key)\n  }\n\n  /**\n   * Get response's `base`-data in `data`-block, or `root`-block (if config.root === true)\n   *\n   * @example resp.data()     => { data: ... }\n   * @example resp.data('title')    => { data: { title: 'Title' } }\n   * @example resp.data('content.components.2.title')    => { data: { content: { components: [..., ..., {title: 'Title' }] } } }\n   */\n  public data(parameter?: string): any {\n    if (this.isContent() || this.isBinary()) {\n      return this.datas.data\n    }\n    return this.get(`data${parameter ? `.${parameter}` : ''}`)\n  }\n\n  /**\n   * Return extra data - all in root side, exclude `data`-block\n   */\n  public extra(parameter?: string) {\n    if (this.isContent()) {\n      return this.datas.extra\n    }\n    return this.get(`extra${parameter ? `.${parameter}` : ''}`)\n  }\n\n  public isContent(): boolean {\n    return this.dataType === 'content'\n  }\n\n  public isBinary(): boolean {\n    return this.dataType === 'blob'\n  }\n\n  public getDataType(): string {\n    return this.dataType\n  }\n}\n"],"mappings":"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"}