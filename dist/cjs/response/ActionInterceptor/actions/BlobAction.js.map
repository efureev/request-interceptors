{"version":3,"file":"BlobAction.js","names":["getFileName","contentDisposition","value","split","buildReader","filename","fnOnDone","reader","FileReader","onloadend","url","result","replace","link","document","createElement","href","download","target","body","append","click","remove","BlobAction","configLayer","response","responseData","axiosResponse","ResponseWrapper","data","headers","headerFilename","b64ToUtf8Safe","done","readAsDataURL","Blob","type","BaseAction"],"sources":["../../../../../src/response/ActionInterceptor/actions/BlobAction.ts"],"sourcesContent":["import BaseAction from './BaseAction'\nimport { b64ToUtf8Safe } from '@feugene/mu'\nimport type { LayerConfig } from '@feugene/layer-request'\nimport type { AxiosResponse } from 'axios'\nimport ResponseWrapper from '../../WrapperInterceptor/ResponseWrapper'\n\nconst getFileName = (contentDisposition?: string, value?: string): string => {\n  if (value) {\n    return value\n  }\n\n  if (contentDisposition) {\n    return contentDisposition.split('filename=')[1]\n  }\n\n  return 'download-file'\n}\n\nconst buildReader = (filename: string, fnOnDone: () => void) => {\n  const reader = new FileReader()\n\n  reader.onloadend = function () {\n    let url: string = <string>reader.result\n\n    url = url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n\n    const link = document.createElement('a')\n\n    link.href = url\n    link.download = filename\n    link.target = '_blank'\n\n    document.body.append(link)\n    link.click()\n\n    link.remove()\n\n    fnOnDone()\n  }\n\n  return reader\n}\n\nexport default class BlobAction extends BaseAction {\n  public run(configLayer: LayerConfig, response: AxiosResponse | ResponseWrapper): void {\n    let responseData\n    let axiosResponse: AxiosResponse\n    if (response instanceof ResponseWrapper) {\n      axiosResponse = response.response\n    }\n    else {\n      responseData = response.data\n      axiosResponse = response\n    }\n\n\n    const contentDisposition: string = axiosResponse.headers['content-disposition']\n    const headerFilename: string = axiosResponse.headers['x-filename']\n\n    const filename = getFileName(contentDisposition, b64ToUtf8Safe(headerFilename))\n\n    buildReader(filename, () => {\n      this.done()\n    })\n      .readAsDataURL(\n        new Blob([responseData], {\n          type: responseData.type || 'application/octet-stream',\n        }),\n      )\n  }\n}\n"],"mappings":";;;;;;;;;AAAA;;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,kBAAD,EAA8BC,KAA9B,EAAyD;EAC3E,IAAIA,KAAJ,EAAW;IACT,OAAOA,KAAP;EACD;;EAED,IAAID,kBAAJ,EAAwB;IACtB,OAAOA,kBAAkB,CAACE,KAAnB,CAAyB,WAAzB,EAAsC,CAAtC,CAAP;EACD;;EAED,OAAO,eAAP;AACD,CAVD;;AAYA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD,EAAmBC,QAAnB,EAA4C;EAC9D,IAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;EAEAD,MAAM,CAACE,SAAP,GAAmB,YAAY;IAC7B,IAAIC,GAAW,GAAWH,MAAM,CAACI,MAAjC;IAEAD,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,cAAZ,EAA4B,uBAA5B,CAAN;IAEA,IAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAb;IAEAF,IAAI,CAACG,IAAL,GAAYN,GAAZ;IACAG,IAAI,CAACI,QAAL,GAAgBZ,QAAhB;IACAQ,IAAI,CAACK,MAAL,GAAc,QAAd;IAEAJ,QAAQ,CAACK,IAAT,CAAcC,MAAd,CAAqBP,IAArB;IACAA,IAAI,CAACQ,KAAL;IAEAR,IAAI,CAACS,MAAL;IAEAhB,QAAQ;EACT,CAjBD;;EAmBA,OAAOC,MAAP;AACD,CAvBD;;IAyBqBgB,U;;;;;;;;;;;;;WACnB,aAAWC,WAAX,EAAqCC,QAArC,EAAsF;MAAA;;MACpF,IAAIC,YAAJ;MACA,IAAIC,aAAJ;;MACA,IAAIF,QAAQ,YAAYG,wBAAxB,EAAyC;QACvCD,aAAa,GAAGF,QAAQ,CAACA,QAAzB;MACD,CAFD,MAGK;QACHC,YAAY,GAAGD,QAAQ,CAACI,IAAxB;QACAF,aAAa,GAAGF,QAAhB;MACD;;MAGD,IAAMxB,kBAA0B,GAAG0B,aAAa,CAACG,OAAd,CAAsB,qBAAtB,CAAnC;MACA,IAAMC,cAAsB,GAAGJ,aAAa,CAACG,OAAd,CAAsB,YAAtB,CAA/B;MAEA,IAAMzB,QAAQ,GAAGL,WAAW,CAACC,kBAAD,EAAqB,IAAA+B,iBAAA,EAAcD,cAAd,CAArB,CAA5B;MAEA3B,WAAW,CAACC,QAAD,EAAW,YAAM;QAC1B,KAAI,CAAC4B,IAAL;MACD,CAFU,CAAX,CAGGC,aAHH,CAII,IAAIC,IAAJ,CAAS,CAACT,YAAD,CAAT,EAAyB;QACvBU,IAAI,EAAEV,YAAY,CAACU,IAAb,IAAqB;MADJ,CAAzB,CAJJ;IAQD;;;;EA1BqCC,oB"}