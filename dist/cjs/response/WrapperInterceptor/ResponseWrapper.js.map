{"version":3,"file":"ResponseWrapper.js","names":["defaultConfig","dataKey","root","ResponseWrapper","response","config","data","extra","merge","setData","isContent","setExtraData","setMessageData","isEmpty","isString","datas","dataType","dk","dataKeyName","undefined","isObject","isArray","isBlob","forEach","value","key","message","isBinary","select","parameter","get"],"sources":["../../../../src/response/WrapperInterceptor/ResponseWrapper.ts"],"sourcesContent":["import { forEach, isArray, isBlob, isEmpty, isObject, isString, merge, select } from '@feugene/mu'\nimport type { AxiosResponse } from 'axios'\n\nconst defaultConfig: ResponseWrapperConfig = {\n  dataKey: 'data',\n  root: false,\n}\n\n\ninterface ResponseWrapperConfig {\n  dataKey: string\n  root: boolean,\n}\n\ninterface ResponseWrapperData {\n  data: any,\n  extra: Record<string, any>,\n}\n\ntype DataType = 'mixed' | 'content' | 'entity' | 'collection' | 'blob'\n/**\n * Create instance, which represent response object\n */\nexport default class ResponseWrapper {\n  private dataType: DataType = 'mixed'\n  private readonly config: ResponseWrapperConfig\n  private readonly datas: ResponseWrapperData = {\n    data: null,\n    extra: {},\n  }\n\n  public readonly response: AxiosResponse\n  private message?: string\n\n  constructor(response: AxiosResponse, config?: Partial<ResponseWrapperConfig>) {\n    this.config = merge<ResponseWrapperConfig>({}, defaultConfig, config || {})\n    this.response = response\n\n    this.setData()\n\n    if (!this.isContent()) {\n      this.setExtraData()\n      this.setMessageData()\n    }\n  }\n\n  private dataKeyName(): string {\n    if (this.config.root) {\n      return ''\n    }\n    return !isEmpty(this.config.dataKey) ? this.config.dataKey : ''\n  }\n\n  private setData(): void {\n    if (isString(this.response.data)) {\n      this.datas.data = this.response.data\n      this.dataType = 'content'\n      return\n    }\n\n    const dk = this.dataKeyName()\n    const data = !isEmpty(dk) && this.response.data[dk] !== undefined ? this.response.data[dk] : this.response.data\n\n    if (isObject(data)) {\n      this.datas.data = { ...data }\n      this.dataType = 'entity'\n    }\n    else if (isArray(data)) {\n      this.datas.data = [...data]\n      this.dataType = 'collection'\n    }\n    else if (isBlob(data)) {\n      this.datas.data = data\n      this.dataType = 'blob'\n    }\n    else {\n      this.datas.data = data\n      this.dataType = isEmpty(dk) ? 'content' : 'mixed'\n    }\n  }\n\n  private setExtraData(): void {\n    const dk = this.dataKeyName()\n    if (dk) {\n      forEach(this.response.data, (value, key) => {\n        if (key !== dk && key !== 'message') {\n          this.datas.extra[<string>key] = value\n        }\n      })\n    }\n  }\n\n  private setMessageData(message = null): void {\n    if (!this.isBinary()) {\n      this.message = !message ? this.response.data.message : message\n    }\n  }\n\n  /**\n   * @example resp.get('data')\n   * @example resp.get('data.title')\n   * @example resp.get('extra')\n   * @example resp.get('extra.meta')\n   */\n  public get(key: string): any {\n    return select(this.datas, key)\n  }\n\n  /**\n   * Get response's `base`-data in `data`-block, or `root`-block (if config.root === true)\n   *\n   * @example resp.data()     => { data: ... }\n   * @example resp.data('title')    => { data: { title: 'Title' } }\n   * @example resp.data('content.components.2.title')    => { data: { content: { components: [..., ..., {title: 'Title' }] } } }\n   */\n  public data(parameter?: string): any {\n    if (this.isContent() || this.isBinary()) {\n      return this.datas.data\n    }\n    return this.get(`data${parameter ? `.${parameter}` : ''}`)\n  }\n\n  /**\n   * Return extra data - all in root side, exclude `data`-block\n   */\n  public extra(parameter?: string) {\n    if (this.isContent()) {\n      return this.datas.extra\n    }\n    return this.get(`extra${parameter ? `.${parameter}` : ''}`)\n  }\n\n  public isContent(): boolean {\n    return this.dataType === 'content'\n  }\n\n  public isBinary(): boolean {\n    return this.dataType === 'blob'\n  }\n\n  public getDataType(): string {\n    return this.dataType\n  }\n}\n"],"mappings":"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"}